@page "/editBoat/{id:int}"
@inject IBoatService BoatService
@inject ModalService _modalService
@inject NavigationManager NavigationManager


<div class="content-header">
    <div class="container-fluid">

        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/boatsList">Boats</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit</li>
            </ol>
        </nav>

        <hr>
    </div>
</div>

<Card Hoverable Title="Edit Boat" Loading="_loading">
    <Form Model="@Boat"
          OnFinish="HandleValidSubmit"
          Layout="vertical">
        <ValidationSummary />
        <FormItem Label="Name">
            <Input @bind-Value="@context.BoatName" />
        </FormItem>
        <FormItem Label="Captain">
            <Input @bind-Value="@context.BoatCaptain" />
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Update
            </Button>
        </FormItem>
    </Form>
</Card>

@code {
    [Parameter]
    public int Id { get; set; }
    bool _loading;
    public Boat Boat { get; set; } = new Boat();

    protected async override Task OnParametersSetAsync()
    {
        _loading = true;
        Boat = await BoatService.GetBoat(Id);
        _loading = false;
    }

    protected async Task HandleValidSubmit()
    {

        var result = await BoatService.UpdateBoat(Boat);
        if (result != null)
        {
            HandleSuccessUpdate();
            NavigationManager.NavigateTo("/boatsList");
        }

    }

    public void HandleSuccessUpdate()
    {
        _modalService.Success(new ConfirmOptions()
        {
            Title = "Success.",
            Content = "Boat Updated Successfully.",
            OnOk = OnOkClick
        });
    }

    public Func<ModalClosingEventArgs, Task> OnOkClick = async (e) => { await Task.Delay(1000); };
}
