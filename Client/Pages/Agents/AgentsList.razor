@page "/agentsList"
@inject IAgentService AgentService
@inject ModalService _modalService
@inject NavigationManager NavigationManager

<div class="content-header">
    <div class="container-fluid">

        <a href="/createAgent" class="btn btn-secondary btn-flat add">
            <i class="fa fa-plus"></i> New Agent
        </a>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">Agents</li>
            </ol>
        </nav>

        <hr>
    </div>
</div>


<Card Hoverable Title="Agents List">
    <Table DataSource="Agents" PageSize="10" Loading="_loading" Size="TableSize.Small" Class="table table-responsive">
        <Column @bind-Field="@context.AgentName"></Column>
        <Column @bind-Field="@context.AgentEmail"></Column>
        <Column @bind-Field="@context.AgentPhone"></Column>
        <Column @bind-Field="@context.AgentAddress"></Column>
        <ActionColumn Title="Action">
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Link" Icon="edit" Color="Color.Green5"
                            OnClick="@(() => NavigationManager.NavigateTo($"editAgent/{context.AgentId}"))">
                    </Button>

                    <Button Type="@ButtonType.Link" Icon="delete" Color="Color.Red5"
                            OnClick="@(() => { _visible = true; _Id = context.AgentId; })">
                    </Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</Card>


<Modal Title="@_title" Visible="@_visible" OnOk="@HandleOk" OnCancel="@HandleCancel" DestroyOnClose="true" OkType="danger">
    Do you want to Delete This Agent?
</Modal>
@code {

    bool _loading;
    public List<Agent> Agents { get; set; } = new List<Agent>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Agents = (await AgentService.GetAgents()).ToList();
        _loading = false;
    }

    string _title = "Delete Confirmation";
    bool _visible = false;
    int _Id;

    private async Task HandleOk(MouseEventArgs e)
    {
        await AgentService.DeleteAgent(_Id);
        Agents = (await AgentService.GetAgents()).ToList();
        _visible = false;
        HandleSuccessDelete();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    public void HandleSuccessDelete()
    {
        _modalService.Success(new ConfirmOptions()
        {
            Title = "Success.",
            Content = "Agent Deleted Successfully.",
            OnOk = OnOkClick
        });
    }

    public Func<ModalClosingEventArgs, Task> OnOkClick = async (e) => { await Task.Delay(1000); };

}